import 'dart:async';
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter/material.dart';

class LocationForm extends StatefulWidget {
  @override
  State<LocationForm> createState() => _LocationFormState();
}

class _LocationFormState extends State<LocationForm> {
  final _lat = TextEditingController();
  final _long = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('API Call'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: SingleChildScrollView(
          child: Column(
            children: [
              TextField(
                controller: _lat,
                keyboardType: TextInputType.number,
                decoration: const InputDecoration(
                  border: OutlineInputBorder(),
                  hintText: 'Latitude',
                  labelText: "Latitude",
                ),
              ),
              SizedBox(height: 20),
              TextField(
                controller: _long,
                keyboardType: TextInputType.number,
                decoration: const InputDecoration(
                  border: OutlineInputBorder(),
                  hintText: 'Longitude',
                  labelText: "Longitude",
                ),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  setState(() {
                    getLocationData(_lat.text, _long.text);
                  });
                },
                child: const Text("Submit"),
              ),
              _lat.text.isNotEmpty && _long.text.isNotEmpty
                  ? Container(
                  height: 500, // Add particular size according to device
                  width: 500,  // Add particular size according to device
                  child: _getLocation(
                      getLocationData(_lat.text.trim(), _long.text.trim())))
                  : Container(),
            ],
          ),
        ),
      ),
    );
  }

  Future<Map<String, dynamic>> getLocationData(String lat, String long) async {
    var url = Uri.parse(
        'https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${long}&zoom=18&addressdetails=1');

    var resp = await http.get(url);

    if (resp.statusCode == 200) {
      return jsonDecode(resp.body);
    } else {
      throw Exception('Failed to load location data');
    }
  }

  Widget _getLocation(Future<Map<String, dynamic>> future) {
    return FutureBuilder<Map<String, dynamic>>(
      future: future,
      builder: (context, snapshot) {
        if (snapshot.hasError) {
          return Center(
            child: Text(snapshot.error.toString()),
          );
        }
        if (snapshot.connectionState == ConnectionState.done) {
          if (snapshot.hasData) {
            return _showAddress(snapshot);
          } else {
            return Center(
              child: Text('No data found'),
            );
          }
        }
        return const Center(
          child: CircularProgressIndicator(),
        );
      },
    );
  }

  Widget _showAddress(AsyncSnapshot<Map<String, dynamic>> snapshot) {
    var address = snapshot.data!['address'];
    if (address == null) {
      return Text('Address not available');
    }

    String displayName = snapshot.data!['display_name'] ?? 'N/A';
    String road = address['road'] ?? 'N/A';
    String town = address['town'] ?? 'N/A';
    String city = address['city'] ?? 'N/A';
    String state = address['state'] ?? 'N/A';
    String postcode = address['postcode'] ?? 'N/A';
    String country = address['country'] ?? 'N/A';

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('Display Name: $displayName'),
        Text('Road: $road'),
        Text('Town: $town'),
        Text('City: $city'),
        Text('State: $state'),
        Text('Postcode: $postcode'),
        Text('Country: $country'),
      ],
    );
  }
}
